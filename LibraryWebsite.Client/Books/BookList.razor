@page "/book-list"
@page "/book-list/{PageNumber:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>Books</h1>

@if (ChangedBookId != null)
{
    <div id="book-changed-alert" class="alert alert-primary">
        Book changed successfully. <a id="book-changed-alert-link" href="book-edit/@ChangedBookId" class="alert-link">Edit</a>.
    </div>
}

<AuthorizeView Policy="@Policies.CanEditBooks">
    <a href="book-edit" class="btn btn-primary" id="books-add">Add book</a>
</AuthorizeView>

<table class="table">
    <thead>
        <tr>
            <th>Title</th>
            <th>Author</th>
            <th>Description</th>
            <th>ISBN-13</th>
            <AuthorizeView Policy="@Policies.CanEditBooks">
                <th></th>
                <th></th>
            </AuthorizeView>
        </tr>
    </thead>
    <tbody>
        @foreach (var book in books)
        {
            <tr>
                <td>@book.Title</td>
                <td>@book.Author</td>
                <td>@book.Description</td>
                <td>@book.Isbn13</td>
                <AuthorizeView Policy="@Policies.CanEditBooks">
                    <td><a href="book-edit/@book.Id" class="btn btn-primary">Edit</a></td>
                    <td><a @onclick="()=>DeleteItem(book.Id)" class="btn btn-outline-danger">Delete</a></td>
                </AuthorizeView>
            </tr>
        }
    </tbody>
</table>

<div class="pagination">
    <a href="book-list/1" class="pagination-first">First page</a>
    <a href="book-list/@(PageNumber - 1)" class="pagination-prev">Previous page</a>
    <a href="book-list/@(PageNumber + 1)" class="pagination-next">Next page</a>
    <a href="book-list/@LastPage" class="pagination-last">Last page</a>
</div>
@code {

    [System.Diagnostics.CodeAnalysis.SuppressMessage("Usage", "CA2227:Collection properties should be read only", Justification = "DTO")]
    public class PagingResultDto<TItem>
    {
        public ICollection<TItem> Items { get; set; } = new List<TItem>();

        public int CurrentPage { get; set; }

        public int TotalPages { get; set; }

        public int TotalCount { get; set; }
    }

    [Parameter]
    public int PageNumber
    {
        get;
        set;
    }

    public int LastPage { get; set; }

    public bool IsFirstPage => PageNumber <= 1;
    public bool IsLastPage => PageNumber >= LastPage;

    private ICollection<BookDto> books = new List<BookDto>();

    String? ChangedBookId = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        NavigationManager.TryGetQueryString("bookChanged", out ChangedBookId);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (PageNumber < 1) PageNumber = 1;

        await RefreshTodoList();

        await base.OnParametersSetAsync();
    }

    private async Task RefreshTodoList()
    {
        var pagedResult = await Http.GetFromJsonAsync<PagingResultDto<BookDto>>("/api/book/page?page=" + (PageNumber - 1));
        if (pagedResult != null)
        {
            books = pagedResult.Items;
            LastPage = pagedResult.TotalPages;
        }
    }

    private async Task DeleteItem(EntityId id)
    {
        await Http.DeleteAsync($"api/book/{id}");
        await RefreshTodoList();
    }

}
